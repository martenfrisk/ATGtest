{"version":3,"sources":["utils/FetchAndFormat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchFromApi","type","input","state","fetch","then","response","json","result","catch","error","console","log","formatDate","date","moment","format","App","useState","String","gameType","setGameType","race","time","selectedRace","setSelectedRace","undefined","raceInfo","setRaceInfo","gameData","setGameData","notAllowed","setNotAllowed","allowedTypes","useEffect","Header","Fragment","className","onSubmit","e","preventDefault","includes","handleSubmit","name","value","onChange","target","toUpperCase","notAllowedInfo","upcoming","map","key","id","onClick","startTime","races","length","status","index","scheduledStartTime","starts","start","number","driver","firstName","lastName","horse","trainer","pedigree","father","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bb1ecff6.chunk.js","sourcesContent":["import moment from 'moment'\r\n\r\nexport function fetchFromApi(type: string, input: string, state: any) {\r\n\tfetch(`https://www.atg.se/services/racinginfo/v1/api/${type}/${input}`)\r\n\t\t.then((response) => response.json())\r\n\t\t.then((result) => state(result))\r\n\t\t.catch((error) => console.log('error', error))\r\n}\r\n\r\nexport const formatDate = (date: string) => moment(date).format('ddd Do H[:]mm')","import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\n\nimport { emptyGame, emptyRace } from './utils/Interface'\nimport { fetchFromApi, formatDate } from './utils/FetchAndFormat'\n\nfunction App() {\n\tconst [ gameType, setGameType ] = useState(String)\n\tconst [ selectedRace, setSelectedRace ] = useState({ race: '', time: '' })\n\tconst [ raceInfo, setRaceInfo ] = useState<emptyRace | undefined>(undefined)\n\tconst [ gameData, setGameData ] = useState<emptyGame | undefined>(undefined)\n\tconst [ notAllowed, setNotAllowed ] = useState(false)\n\n\tconst allowedTypes = [ 'V75', 'V65', 'V64', 'V4' ]\n\n\tuseEffect(\n\t\t() => {\n\t\t\tselectedRace.race !== '' && fetchFromApi('games', selectedRace.race, setRaceInfo)\n\t\t},\n\t\t[ selectedRace ]\n\t)\n\n\tconst handleSubmit = (e: any) => {\n\t\te.preventDefault()\n\t\tif (allowedTypes.includes(gameType)) {\n\t\t\tfetchFromApi('products', gameType, setGameData)\n\t\t\tsetNotAllowed(false)\n\t\t} else {\n\t\t\tsetGameData(undefined)\n\t\t\tsetRaceInfo(undefined)\n\t\t\tsetNotAllowed(true)\n\t\t}\n\t}\n\n\tconst Header = (\n\t\t<React.Fragment>\n\t\t\t<h1 className=\"text-3xl mb-6 italic uppercase text-yellow-500\">ATG frontend interview task</h1>\n\t\t\t<p className=\"mb-4\">Enter a game type below (V75, V65, V64 or V4)</p>\n\t\t\t<form onSubmit={(e) => handleSubmit(e)} name=\"inputForm\">\n\t\t\t\t<input\n\t\t\t\t\tvalue={gameType}\n\t\t\t\t\tonChange={(e) => setGameType(e.target.value.toUpperCase())}\n\t\t\t\t\tclassName=\"text-center text-black p-2\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t/>\n\t\t\t\t<input type=\"submit\" value=\"Submit\" className=\"text-gray-900 p-2\" />\n\t\t\t</form>\n\t\t</React.Fragment>\n\t)\n\n\tconst notAllowedInfo = (\n\t\t<p className=\"bg-red-600 rounded-md mt-6 text-white p-6\">\n\t\t\tPlease enter one of the following game types: V75, V65, V64 or V4.\n\t\t</p>\n\t)\n\n\treturn (\n\t\t<div className=\"w-full px-4 md:px-0 text-white md:w-1/2 mx-auto mt-6 md:mt-20 flex items-center flex-col\">\n\t\t\t{Header}\n\n\t\t\t<div className=\"w-full\">\n\t\t\t\t{notAllowed && { notAllowedInfo }}\n\t\t\t\t{gameData !== undefined && (\n\t\t\t\t\t<div className=\"mt-10 w-full flex flex-wrap md:flex-col\">\n\t\t\t\t\t\t<p className=\"mb-4\">Click a race to see detailed information</p>\n\n\t\t\t\t\t\t{gameData.upcoming.map((race) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={race.id}\n\t\t\t\t\t\t\t\tonClick={() => setSelectedRace({ race: race.id, time: race.startTime })}\n\t\t\t\t\t\t\t\tclassName={`cursor-pointer border-b-4 w-1/2 md:w-40 my-1 p-2 ${race.id ===\n\t\t\t\t\t\t\t\tselectedRace.race\n\t\t\t\t\t\t\t\t\t? 'border-blue-100'\n\t\t\t\t\t\t\t\t\t: 'border-blue-900 '}`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t&gt; {formatDate(race.startTime)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{raceInfo !== undefined && (\n\t\t\t\t\t<div className=\"text-black\">\n\n\t\t\t\t\t\t<div className=\"text-center text-white\">\n\t\t\t\t\t\t\t<div className=\"mt-12 mb-6 text-2xl\">{formatDate(selectedRace.time)}</div>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\tThis race has {raceInfo.races.length} starts and is {raceInfo.status}.\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t{raceInfo.races.map((race, index) => (\n\t\t\t\t\t\t\t<div className=\"flex flex-wrap my-10 w-full bg-blue-100 p-4\">\n\t\t\t\t\t\t\t\t<div className=\"w-full text-sm mb-4\">Start {index + 1}</div>\n\t\t\t\t\t\t\t\t<div className=\"w-1/4\">\n\t\t\t\t\t\t\t\t\t{moment(race.scheduledStartTime).format('H[:]mm')} {`(`}\n\t\t\t\t\t\t\t\t\t{moment(race.date).format('ddd D')}\n\t\t\t\t\t\t\t\t\t{`)`}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"w-3/4 text-lg\">{race.name}</div>\n\t\t\t\t\t\t\t\t<div className=\"w-full\" />\n\n\t\t\t\t\t\t\t\t{race.starts.map((start) => (\n\t\t\t\t\t\t\t\t\t<div className=\"w-full flex flex-wrap md:w-1/3 py-4 px-2\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"w-1/6\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"rounded-full shadow-sm text-center w-6 h-6 bg-white\">\n\t\t\t\t\t\t\t\t\t\t\t\t{start.number}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className=\"w-5/6 flex flex-col\">\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"pl-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t&#x1F472; {start.driver.firstName} {start.driver.lastName}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<details className=\"pl-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t<summary>\n\t\t\t\t\t\t\t\t\t\t\t\t\t&#x1F40E;{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"border-b border-blue-800 border-dotted\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{start.horse.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</summary>\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"my-1 text-sm pl-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tTrainer: {start.horse.trainer.firstName}{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{start.horse.trainer.lastName}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t<p className=\"my-1 text-sm pl-2\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tFather: {start.horse.pedigree.father.name}\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t</details>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}